def calculate_total_service_time_and_cost(Jk, Lk, distances, travel_times, pickup_times, waiting_times, mu):
    # Initialize service time and cost for each order
    es = {j: 0 for j in Jk}
    ec = {j: 0 for j in Jk}

    # Initialize visit status for each location
    Vl = {l: 0 for l in Lk}

    # Current location of worker k
    lk = "current_location_of_worker_k"  # Replace with actual current location
    c = 0  # Counter for visited locations

    while c != len(Lk):
        # Find the nearest unvisited location l0
        l0 = min((l for l in Lk if Vl[l] == 0), key=lambda l: distances[(lk, l)])

        # Determine the order associated with the location l0
        j = get_order_associated_with_location(l0, Jk)  # Define this function as needed

        if l0 == pickup_location_of_order(j):  # Check if l0 is the pickup location
            es[j] += travel_times[(lk, l0)] + waiting_times[j]
            ec[j] += mu * distances[(lk, l0)]
        elif l0 == delivery_location_of_order(j):  # Check if l0 is the delivery location
            if Vl[pickup_location_of_order(j)] == 1:  # Check if pickup location was visited
                es[j] += travel_times[(lk, l0)]
                ec[j] += mu * distances[(lk, l0)]
            else:
                continue  # If pickup location not visited, continue

        # Update worker's location and visit status
        lk = l0
        Vl[l0] = 1
        c += 1

    # Calculate total service time and cost
    eSk = sum(es.values())
    Cek = sum(ec.values())

    return eSk, Cek

# Example usage (replace with actual data):
Jk = [1, 2, 3]  # Set of orders for worker k
Lk = ['loc1', 'loc2', 'loc3', 'loc4']  # Set of locations
distances = {('loc1', 'loc2'): 5, ('loc1', 'loc3'): 10, ('loc2', 'loc4'): 7}  # Distances between locations
travel_times = {('loc1', 'loc2'): 3, ('loc1', 'loc3'): 6, ('loc2', 'loc4'): 4}  # Travel times between locations
pickup_times = {1: 2, 2: 3, 3: 2}  # Pickup times
waiting_times = {1: 1, 2: 2, 3: 1}  # Waiting times
mu = 1.5  # Per unit travel cost

eSk, Cek = calculate_total_service_time_and_cost(Jk, Lk, distances, travel_times, pickup_times, waiting_times, mu)
print(f"Total Service Time: {eSk}, Total Delivery Cost: {Cek}")
