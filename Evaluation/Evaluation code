import pandas as pd
import os
import matplotlib.pyplot as plt

# Base directory for instances
base_dir = "/workspaces/aiseminar/Evaluation"
instances = ["instance 1", "instance 2", "instance 3"]
greedy_files = ["greedy_assignments 1.csv", "greedy_assignments 2.csv", "greedy_assignments 3.csv"]
optimal_files = ["optimal_assignment_with_metrics 1.csv", "optimal_assignment_with_metrics 2.csv", "optimal_assignment_with_metrics 3.csv"]

# Initialize lists to store mean values
mean_service_time_greedy = []
mean_service_time_optimal = []
mean_estimated_profit_greedy = []
mean_estimated_profit_optimal = []

# Lists for writing results to CSV
results = []

# Number of orders per instance
number_of_orders = [20, 40, 60]  # Orders for each instance

# Iterate over each instance
for i in range(len(instances)):
    # Paths for each file
    greedy_file_path = os.path.join(base_dir, instances[i], greedy_files[i])
    optimal_file_path = os.path.join(base_dir, instances[i], optimal_files[i])
    
    try:
        # Read CSV files
        greedy_df = pd.read_csv(greedy_file_path)
        optimal_df = pd.read_csv(optimal_file_path)
        
        # Calculate statistics
        stats = {
            'Instance': f'instance {i + 1}',
            'Metric': 'Mean',
            'Service Time': f"Greedy: {greedy_df['service_time'].mean():.2f} / Optimal: {optimal_df['service_time'].mean():.2f}",
            'Estimated Profit': f"Greedy: {greedy_df['estimated_profit'].mean():.2f} / Optimal: {optimal_df['estimated_profit'].mean():.2f}"
        }
        results.append(stats)
        
        stats = {
            'Instance': f'instance {i + 1}',
            'Metric': 'Max',
            'Service Time': f"Greedy: {greedy_df['service_time'].max():.2f} / Optimal: {optimal_df['service_time'].max():.2f}",
            'Estimated Profit': f"Greedy: {greedy_df['estimated_profit'].max():.2f} / Optimal: {optimal_df['estimated_profit'].max():.2f}"
        }
        results.append(stats)
        
        stats = {
            'Instance': f'instance {i + 1}',
            'Metric': 'Min',
            'Service Time': f"Greedy: {greedy_df['service_time'].min():.2f} / Optimal: {optimal_df['service_time'].min():.2f}",
            'Estimated Profit': f"Greedy: {greedy_df['estimated_profit'].min():.2f} / Optimal: {optimal_df['estimated_profit'].min():.2f}"
        }
        results.append(stats)

        # Append means for plotting
        mean_service_time_greedy.append(greedy_df['service_time'].mean())
        mean_service_time_optimal.append(optimal_df['service_time'].mean())
        mean_estimated_profit_greedy.append(greedy_df['estimated_profit'].mean())
        mean_estimated_profit_optimal.append(optimal_df['estimated_profit'].mean())
        
    except FileNotFoundError as e:
        print(f"File not found: {e.filename}")

# Save the results to a CSV file
output_csv_path = os.path.join(base_dir, "overall_instance_results.csv")
results_df = pd.DataFrame(results)
results_df.to_csv(output_csv_path, index=False)
print(f"Overall results saved to {output_csv_path}")

# Plotting graphs
plt.figure(figsize=(10, 5))

# Graph 1: Mean Service Time
plt.subplot(1, 2, 1)
plt.plot(number_of_orders, mean_service_time_greedy, marker='s', color='black', label='Greedy Assignments')
plt.plot(number_of_orders, mean_service_time_optimal, marker='o', color='red', label='Optimal Assignments')
plt.xlabel('Number of Orders')
plt.ylabel('Mean Service Time')
plt.title('Mean Service Time vs Number of Orders')
plt.legend()

# Graph 2: Mean Estimated Profit
plt.subplot(1, 2, 2)
plt.plot(number_of_orders, mean_estimated_profit_greedy, marker='s', color='black', label='Greedy Assignments')
plt.plot(number_of_orders, mean_estimated_profit_optimal, marker='o', color='red', label='Optimal Assignments')
plt.xlabel('Number of Orders')
plt.ylabel('Mean Estimated Profit')
plt.title('Mean Estimated Profit vs Number of Orders')
plt.legend()



# Save both graphs in a single file
combined_graph_path = os.path.join(base_dir, "combined_graphs.png")
plt.tight_layout()
plt.savefig(combined_graph_path)
plt.show()

print(f"Combined graphs saved to {combined_graph_path}")
